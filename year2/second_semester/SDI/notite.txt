REST is an acronym for REpresentational State Transfer and an architectural style for distributed hypermedia systems

6 guiding principles:
 -uniform interface
     The following four constraints can achieve a uniform REST interface:
	Identification of resources – The interface must uniquely identify each resource involved in the interaction between the client and the server.
	Manipulation of resources through representations – The resources should have uniform representations in the server response. API consumers should use these representations to modify the resources state in the server.
	Self-descriptive messages – Each resource representation should carry enough information to describe how to process the message. It should also provide information of the additional actions that the client can perform on the resource.
	Hypermedia as the engine of application state – The client should have only the initial URI of the application. The client application should dynamically drive all other resources and interactions with the use of hyperlinks.
 -client-server
     separation of concerns; each one evolve differently, but make sure the interface/contract between the client and the server does not break
 -stateless
     each request from the client to the server must contain all of the information necessary to understand and complete the request
     the client application must entirely keep the session state
 -cacheable
     a response should implicitly or explicitly label itself as cacheable or non-cacheable.
	If the response is cacheable, the client application gets the right to reuse the response data later for equivalent requests and a specified period
 -layered system
     each component cannot see beyond the immediate layer they are interacting with
 -code on demand
The majority of REST implementations focus on the core principles of statelessness, resource-oriented design, and the use of standard HTTP methods.

resource = abstraction of information in REST (a document or image, a temporal service, a collection of other resources, or a non-virtual object (e.g., a person))
resource representation = the state of the resource, at any particular time
The resource representations are consist of:     ~ the data     ~ the metadata describing the data
                    ~ and the hypermedia links that can help the clients in transition to the next desired state
REST API’s resource model - (set) A REST API consists of an assembly of interlinked resources
URIs = Uniform Resource Identifiers
ORM = Object Relation Mapping - set of techniques used to abstract (mostly relational) databases behind classes
migration - analyses the changes in your data model relative to the current database structure and executes the needed queries to make the database match your data model-acken d code into sql code

The N+1 selects problem is a common issue when working with ORMs. It won’t matter much in your labs since you will have little data, but you will soon need to avoid it. Some keywords and links for this:
https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping 
Lazy and eager loading
-generally pertains to orms s
-usually happens when you execcute queries within repetitive structure such as a for loop
-can be avoided using JOIN operators

Unit tests generally test a single aspect or component of your application
Integration tests generally test if multiple components work well together
Frontend testing cypress
Stress testing / Benchmarking - It’s important to know how many users our app can serve before becoming slow

Many frontends are SPAs - Single Page Applications:
They are called this because the page never changes, only the displayed route and the contents change, but the browser only loads the page once.

JWT - JSON Web Tokens
https://jwt.io/
Authentication: verifying if you are who you say you are.
Authorization: verifying that you are allowed to do what you’re trying to do.
Authentication is implemented with register and login, authorization is implemented with user roles

Docker - Allows applications to run in isolated containers
Much faster deployments
Easier scaling - see for example Kubernetes
Easier configuration
An industry standard

Nginx
Gunicorn
SSL certificate - letsencrypt

Websockets - Similar to sockets, except on the Web
	     Allows two way, real-time communication between the client and the server (no polling)
REST is one way: the server cannot send data to the client unprompted
Ideal for things that need faster updates or bidirectional communications: Chats; Financial apps, especially trading

REST APIs
Concepts, GET / POST / PUT / DELETE, frameworks, ORMs
Deployment
Cloud VMs, basic deployments, nginx, letsencrypt, Docker
Frontend	
React, Angular, SPAs, state management, user experience
Other
Git, github, websockets, stress testing


SPAs should never refresh the page to achieve something
After login, the top app bar should change to display at least your username 
This should be done without refreshing the page
The app bar needs a way to respond to User Service events
- Angular: using Subject / BehaviorSubject and subscribing to it from the App Bar component
- React: ContextAPI

Spike test: simulate constant number o users and then sudden & short lived increased
nginx: is a reverse proxi server which can proxy rewwuest to various application servers

when inserrting data into a atable column constraints such as uniwue can cause slowdowns
validations: needed on both front and backend

an index to a column: select statemesnts with where checks on the column are slow

keypress in a textbox cause a request to send in the backend => await

invalidate a JWT so that the user using it has no longer any permissions => use a backlist which is checked on each request











